name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install detect-secrets bandit pip-audit

      - name: Secret scanning (detect-secrets)
        run: |
          # Create baseline if it doesn't exist
          if [ ! -f .secrets.baseline ]; then
            detect-secrets scan > .secrets.baseline
          fi
          # Scan for secrets
          detect-secrets scan --baseline .secrets.baseline
        continue-on-error: false

      - name: Security audit (Bandit)
        run: |
          bandit -r src -ll
        continue-on-error: true

      - name: Dependency vulnerability scan (pip-audit)
        run: |
          pip-audit --strict
        continue-on-error: true

  architecture-validation:
    name: Architecture Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Check import cycles (import-linter)
        run: |
          lint-imports
        continue-on-error: false

      - name: Generate dependency graph
        run: |
          python scripts/analyze_dependencies.py
        continue-on-error: true

  build-test:
    name: Build and Test
    needs: [security-scan, architecture-validation]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          ffmpeg -version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Lint (ruff)
        run: ruff check .

      - name: Format check (black)
        run: black --check .

      - name: Run unit tests
        env:
          DEEPGRAM_API_KEY: dummy_test_key
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
        run: |
          pytest tests/unit/ --cov=src --cov-report=xml --cov-report=term-missing

      - name: Run FFmpeg integration tests
        env:
          DEEPGRAM_API_KEY: dummy_test_key
        run: |
          pytest tests/integration/test_ffmpeg_integration.py -v --timeout=30
          pytest tests/integration/test_ffmpeg_errors.py -v

      - name: Run async workflow tests
        env:
          DEEPGRAM_API_KEY: dummy_test_key
        run: |
          pytest tests/integration/test_async_workflows.py -v --timeout=60

      - name: Run error recovery tests
        env:
          DEEPGRAM_API_KEY: dummy_test_key
        run: |
          pytest tests/integration/test_error_recovery.py -v --timeout=60

      - name: Run security tests
        env:
          DEEPGRAM_API_KEY: dummy_test_key
        run: |
          pytest tests/test_security.py -v

      - name: Run performance benchmarks
        env:
          DEEPGRAM_API_KEY: dummy_test_key
        run: |
          pytest tests/integration/test_performance_benchmarks.py -v --timeout=120
        continue-on-error: true

      - name: Coverage check
        run: |
          pytest --cov=src --cov-branch --cov-report=xml --cov-report=term-missing --cov-fail-under=90

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          fail_ci_if_error: false

  e2e-tests:
    name: End-to-End Tests
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run E2E tests
        env:
          DEEPGRAM_API_KEY: dummy_test_key
        run: |
          pytest tests/e2e/ --timeout=120
        continue-on-error: true
